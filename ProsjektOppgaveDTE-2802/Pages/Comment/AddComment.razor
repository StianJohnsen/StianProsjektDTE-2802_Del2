@page "/addComment/{PostId}"
@using ProsjektOppgaveBlazor.data.Models.ViewModel
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager

@inject HttpClient BlogHttpClient

<h3>Create comment</h3>



    <div class="row">
        <div class="col-md-3">
            <EditForm Model="@commentViewModel">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <div>
                        <label for="Name">Comment:</label>
                        <InputText class="form-control" @bind-Value="commentViewModel.Text" />
                        <ValidationMessage For="@(()=>commentViewModel.Text)" />
                    </div>

                        <button class="btn btn-primary" @onclick="Save" type="submit">Save</button>
                    
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                </div>
            </EditForm>
        </div>
    </div>



@code {
    [Parameter]
    public string PostId { get; set; }

    private ClaimsPrincipal user;
    private string userId;


    private HubConnection? HubConnection;


    private Comment comment = new ();

    
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/commentHub"))
            .Build();
        
        await HubConnection.StartAsync();
        
        var authState = await authenticationStateTask;
        user = authState.User;
        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
    }
    
    private CommentViewModel commentViewModel = new();



    private async Task Save()
    {
        
        commentViewModel.OwnerId = userId;

        var response = await BlogHttpClient.PostAsJsonAsync($"/Comment/{PostId}", commentViewModel);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"comments/{PostId}");
            var currentComment = await response.Content.ReadFromJsonAsync<Comment>();
            if (HubConnection is not null)
            {
                await HubConnection.SendAsync("SendCreateComment", currentComment);
            }
        }
        else
        {
            Console.WriteLine(response.Content.ReadAsStringAsync().Result);
        }
    }

}