@page "/comments/{PostId}"
@using System.Security.Claims
@inject HttpClient BlogHttpClient
@inject NavigationManager NavigationManager

<h3>Comments</h3>

@if (post != null)
{
    <a class="btn btn-primary" href="addComment/@post.PostId">Create</a>
}

@if (comments == null) 
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" >
    <thead>
    <tr>
        <th>Text</th>
        <th>Owner</th>
    </tr>
    </thead>
    <tbody>
            @foreach (var comment in comments)
    {
        <tr>
            <td>@comment.Text</td>
            <td>@comment.Owner.Email</td>
            @if(comment.OwnerId == userId)
        {
            <td><a href="comment/@comment.CommentId">Edit</a></td>
            <td><a href="comments/@comment.PostId" @onclick="@(e =>DeleteBlog(comment.CommentId))">Delete</a></td>
        }

        </tr>
    }
    </tbody>
    </table>
}

@code {
    [Parameter]
    public string PostId { get; set; }
    private Comment[] comments;
    private Post post;

    private ClaimsPrincipal user;

    private string userId;
    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;

        user = authState.User;
        
        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        
        
        comments = await BlogHttpClient.GetFromJsonAsync<Comment[]>($"/Comment?postId={PostId}");
        post = await BlogHttpClient.GetFromJsonAsync<Post>($"/Post/{PostId}");

    }

    private async Task DeleteBlog(int id)
    {
        var response = await BlogHttpClient.DeleteAsync($"/Comment/{id}");
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/comments/{PostId}",true);
        }
        else
        {
            Console.WriteLine($"Error: {response.Content.ReadAsStringAsync().Result}");

        }
    }
}
