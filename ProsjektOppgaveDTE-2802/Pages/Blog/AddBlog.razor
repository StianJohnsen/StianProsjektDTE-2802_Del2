@page "/blog"

@using ProsjektOppgaveBlazor.data.Models;
@using Microsoft.AspNetCore.Identity
@using System.Security.Principal
@using System.Text.Json
@using ProsjektOppgaveBlazor.data.Models.ViewModel
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient BlogHttpClient
@inject NavigationManager NavigationManager


<h3>Create blog</h3>

    <div class="row">
        <div class="col-md-3">
            <EditForm Model="@blogViewModel">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <div>
                        <label for="Name">Blog Name:</label>
                        <InputText class="form-control" @bind-Value="blogViewModel.Name"/>
                        <ValidationMessage For="@(() => blogViewModel.Name)"/>

                    </div>
                    <div class="form-check form-switch">
                        <label for="Status">Allow post and comments</label>
                        <InputCheckbox class="form-check-input" @bind-Value="@Status"/>
                        <ValidationMessage For="@(() => blogViewModel.Status)"/>
                    </div>
                    <button class="btn btn-primary" @onclick="Save" type="submit" disabled="@(!IsConnected)">Save</button>

                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                </div>
            </EditForm>
        </div>
    </div>



@code {


    private HubConnection? hubConnection;

    [Parameter] public int BlogId { get; set; }


    private ClaimsPrincipal user;
    private string userId;

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();
        


        await hubConnection.StartAsync();
        await LogUserAuthenticationState();
    }


    private async Task LogUserAuthenticationState()
    {
        var authState = await authenticationStateTask;
        user = authState.User;
        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        Console.WriteLine(userId);
    }


    private bool Status
    {
        get
        {
            if (blogViewModel.Status != 1)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        set
        {
            if (!value)
            {
                blogViewModel.Status = 0;
            }
            else
            {
                blogViewModel.Status = 1;
            }
        }
    }


    private BlogViewModel blogViewModel = new ();


    private async Task Save()
    {
        //blog.Owner.UserName = user.Name;

        //blog.Owner = jsonHello;

        //await BlogHttpClient.PostAsJsonAsync("https://localhost:7022/Blog", blog);
        
        blogViewModel.OwnerId = userId;


        var response = await BlogHttpClient.PostAsJsonAsync("https://localhost:7022/Blog", blogViewModel);
        Console.WriteLine(response);
        
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/blogs");
        }
        //Console.WriteLine(response.Content);
        
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage",blogViewModel,user.Identity.Name);
        }
    }
    
    
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;
    
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}