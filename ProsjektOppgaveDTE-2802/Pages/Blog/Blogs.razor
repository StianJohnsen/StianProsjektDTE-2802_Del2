@page "/blogs"
@using ProsjektOppgaveBlazor.data.Models;
@using System.Security.Principal
@using System.Net.Http.Headers
@using System.Security.Claims
@inject HttpClient BlogHttpClient
@inject NavigationManager NavigationManager

<h3>Blogs</h3>

<p>Current user: @user.Identity.Name</p>

<a class="btn btn-primary" href="blog">Create</a>

@if (blogs == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Owner</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var blog in blogs)
        {
            <tr>
                <td>@blog.Name</td>
                <td>@blog.Owner.UserName</td>
                <td>
                    <a href="posts/@blog.BlogId">View</a>
                </td>
                @if (blog.OwnerId == userId)
                {
                    <td>
                        <a href="blog/@blog.BlogId">Edit</a>
                    </td>
                    <td>
                        <a href="blogs" @onclick="@(e => DeleteBlog(blog.BlogId))">Delete</a>
                    </td>   
                }

            </tr>
        }
        </tbody>
    </table>
}

@code {
    private Blog[] blogs;

    private ClaimsPrincipal user;

    private string userId;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;

        user = authState.User;

        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);


        blogs = await BlogHttpClient.GetFromJsonAsync<Blog[]>("/Blog");
    }

    private async Task DeleteBlog(int id)
    {
        var response = await BlogHttpClient.DeleteAsync($"/Blog/{id}");
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/blogs",true);
        }
    }




}