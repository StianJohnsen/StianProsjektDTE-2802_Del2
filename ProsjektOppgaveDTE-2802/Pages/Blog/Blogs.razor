@page "/blogs"
@using ProsjektOppgaveBlazor.data.Models;
@using System.Security.Principal
@using System.Net.Http.Headers
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@using ProsjektOppgaveBlazor.data.Models.ViewModel
@inject HttpClient BlogHttpClient
@inject NavigationManager NavigationManager

<h3>Blogs</h3>

@if (user is not null)
{
    <p>Current user: @user.Identity.Name</p>

}

<a class="btn btn-primary" href="blog">Create</a>

@if (testBlogViewModel is not null)
{
    <p>ViewModel: @testBlogViewModel.Name</p>

}
@if (blogs == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Owner</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var blog in blogs)
        {
            <tr>
                <td>@blog.Name</td>
                <td>@blog.Owner?.UserName</td>
                <td>
                    <a href="posts/@blog.BlogId">Posts</a>
                </td>
                @if (blog.OwnerId == userId)
                {
                    <td>
                        <a href="blog/@blog.BlogId">Edit</a>
                    </td>
                    <td>
                        <a href="blogs" @onclick="@(e => DeleteBlog(blog.BlogId))">Delete</a>
                    </td>   
                }

            </tr>
        }
        </tbody>
    </table>
}

@code {
    private HubConnection? hubConnection;
    
    private List<Blog> blogs;
    
    private BlogViewModel testBlogViewModel;

    private ClaimsPrincipal user;

    private string userId;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/blogHub"))
            .Build();
        
        
        hubConnection.On<Blog>("ReceiveCreateBlog", (currentBlog) =>
        {
            blogs.Add(currentBlog);
            InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On<Blog>("ReceiveEditBlog", (currentBlog) =>
        {

            var index = blogs.FindIndex(blog => blog.BlogId == currentBlog.BlogId);

            if (index != -1)
            {
                blogs[index] = currentBlog;
            }
            InvokeAsync(StateHasChanged);
        });
        
        
        
        hubConnection.On<int>("ReceiveDeleteBlog", (currentBlogId) =>
        {
            var blogToBeDeleted = blogs.Find(blog => blog.BlogId == currentBlogId);
            blogs.Remove(blogToBeDeleted);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        
        var authState = await authenticationStateTask;

        user = authState.User;

        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);


        blogs = await BlogHttpClient.GetFromJsonAsync<List<Blog>>("/Blog");
    }
    

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;
    
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task DeleteBlog(int id)
    {
        var response = await BlogHttpClient.DeleteAsync($"/Blog/{id}");
        if (response.IsSuccessStatusCode)
        {
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("SendDeleteBlog",id);
            }
            NavigationManager.NavigateTo("/blogs");
        }
        
    }




}