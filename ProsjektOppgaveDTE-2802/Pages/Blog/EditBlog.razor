
@page "/blog/{BlogId:int}"

@using ProsjektOppgaveBlazor.data.Models;
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@using ProsjektOppgaveBlazor.data.Models.ViewModel
@inject HttpClient BlogHttpClient
@inject NavigationManager NavigationManager

<h3>Edit blog</h3>



    <div class="row">
        <div class="col-md-3">
            <EditForm Model="@blogViewModel">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <div>
                        <label for="Name">Blog Name:</label>
                        <InputText class="form-control" @bind-Value="blogViewModel.Name"/>
                        <ValidationMessage For="@(()=>blogViewModel.Name)"/>
                    </div>
                    <div class="form-check form-switch">
                        <label for="Status">Allow post and comments</label>
                        <InputCheckbox class="form-check-input" @bind-Value="Status"/>
                        <ValidationMessage For="@(()=>blogViewModel.Status)" />
                    </div>
                        <button class="btn btn-primary" type="submit" @onclick="Save">Save</button>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                </div>
            </EditForm>
        </div>
    </div>


@code {
    [Parameter]
    public int BlogId { get; set; }
    
    private Blog blog = new();
    
    private HubConnection? HubConnection;


    private bool Status
    {
        get
        {
            if (blogViewModel.Status != 1)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        set
        {
            if (!value)
            {
                blogViewModel.Status = 0;
            }
            else
            {
                blogViewModel.Status = 1;
            }
        }
    }

    @*string showTags()
    {
        string tags = "";
        int length = blog.BlogTags.Count();
        int index = 0;
        foreach (var tag in blog.BlogTags)
        {
            if (length > 0)
            {
                tags += tag + ", ";
                index += 1;
            }
            else
            {
                tags += tag;
            }


        }
        return tags;
    }*@

    private BlogViewModel blogViewModel = new();
    protected override async Task OnInitializedAsync()
    {
        blog = await BlogHttpClient.GetFromJsonAsync<Blog>($"https://localhost:7022/Blog/{BlogId}");
        blogViewModel.BlogId = blog.BlogId;
        blogViewModel.Name = blog.Name;
        blogViewModel.Status = blog.Status;
        blogViewModel.OwnerId = blog.OwnerId;
        
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/blogHub"))
            .Build();
        


        await HubConnection.StartAsync();
    }

    private async Task Save()
    {
        var response = await BlogHttpClient.PutAsJsonAsync($"https://localhost:7022/Blog/{BlogId}", blogViewModel);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/blogs");
            var currentBlog = await response.Content.ReadFromJsonAsync<Blog>();
            if (HubConnection is not null)
            {
                await HubConnection.SendAsync("SendEditBlog",currentBlog);
            }
        }
    }

}