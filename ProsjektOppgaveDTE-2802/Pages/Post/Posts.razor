@page "/posts/{BlogId}"
@using ProsjektOppgaveBlazor.data.Models;
@using System.Security.Claims
@inject HttpClient BlogHttpClient
@inject NavigationManager NavigationManager

<h3>Posts</h3>

@if (blog != null)
{
    @if (blog.Status == 1)
    {
        <a class="btn btn-primary" href="addpost/@blog.BlogId">Create</a>
    } 
}



@if (posts == null) 
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" >
    <thead>
    <tr>
        <th>Title</th>
        <th>Content</th>
        <th>Owner</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var post in posts)
    {
        <tr>
            <td>@post.Title</td>
            <td>@post.Content</td>
            <td>@post.Owner.UserName</td>
            <td><a href="comments/@post.PostId">View</a></td>
            @if (post.OwnerId == userId)
            {
                <td><a href="post/@post.PostId">Edit</a></td>
                <td><a href="posts/@post.BlogId" @onclick="@(e =>DeletePost(post.PostId))">Delete</a></td>
            }

        </tr>
    }
    </tbody>
    </table>
}

@code {
    [Parameter]
    public string BlogId { get; set; }
    private Post[] posts;
    private Blog blog;

    private ClaimsPrincipal user;

    private string userId;
    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        
        user = authState.User;
        
        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        
        posts = await BlogHttpClient.GetFromJsonAsync<Post[]>($"/Post?blogId={BlogId}");
        blog = await BlogHttpClient.GetFromJsonAsync<Blog>($"/Blog/{BlogId}");
    }

    private async Task DeletePost(int id)
    {
        var response = await BlogHttpClient.DeleteAsync($"/Post/{id}");
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/posts/{BlogId}",true);
        }
        else
        {
            Console.WriteLine($"Error: {response.Content.ReadAsStringAsync().Result}");
        }
    }
}
