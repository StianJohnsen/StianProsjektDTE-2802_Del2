@page "/addpost/{BlogId}"
@using ProsjektOppgaveBlazor.data.Models.ViewModel
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager


@inject HttpClient BlogHttpClient

<h3>Create post</h3>

@if (post == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-3">
            <EditForm Model="@postViewModel">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <div>
                        <label for="Name">Post title:</label>
                        <InputText class="form-control" @bind-Value="postViewModel.Title" />
                        <ValidationMessage For="@(()=>postViewModel.Title)" />
                    </div>
                    <div>
                        <label for="Name">Post content:</label>
                        <InputText class="form-control" @bind-Value="postViewModel.Content" />
                        <ValidationMessage For="@(()=>postViewModel.Content)" />
                    </div>
                        
                    <button class="btn btn-primary" @onclick="Save" type="submit" disabled="@(!IsConnected)">Save</button>
                    
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                </div>
            </EditForm>
            
            <p>@errorMessage</p>
        </div>
    </div>
}


@code {
    [Parameter]
    public string BlogId { get; set; }


    private HubConnection? HubConnection;
    private ClaimsPrincipal user;
    private string userId;
    private Post post = new Post();
    
    private string errorMessage = string.Empty;
    
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/postHub"))
            .Build();
        
        await HubConnection.StartAsync();
        
        var authState = await authenticationStateTask;
        user = authState.User;
        userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    private PostViewModel postViewModel = new();


    private async Task Save()
    {

        postViewModel.OwnerId = userId;
        
        var response = await BlogHttpClient.PostAsJsonAsync($"/post/{BlogId}", postViewModel);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/posts/{BlogId}");
            var currentPost = await response.Content.ReadFromJsonAsync<Post>();
            if (HubConnection is not null)
            {
                await HubConnection.SendAsync("SendCreatePost", currentPost);
            }
        }
        else
        {
            errorMessage = response.Content.ReadAsStringAsync().Result;
        }

    }

    public bool IsConnected =>
        HubConnection?.State == HubConnectionState.Connected;


    private async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            await HubConnection.DisposeAsync();
        }
    }
}