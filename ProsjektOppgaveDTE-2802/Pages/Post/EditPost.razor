@page "/post/{PostId:int}"


@using ProsjektOppgaveBlazor.data.Models.ViewModel
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient BlogHttpClient
@inject NavigationManager NavigationManager

<h3>Edit post</h3>

@if (post == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="row">
        <div class="col-md-3">
            <EditForm Model="@postViewModel">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <div>
                        <label for="Name">Post Title:</label>
                        <InputText class="form-control" @bind-Value="postViewModel.Title"/>
                        <ValidationMessage For="@(() => postViewModel.Title)"/>
                    </div>
                    <div>
                        <label for="Content">Post Content:</label>
                        <InputText class="form-control" @bind-Value="postViewModel.Content"/>
                        <ValidationMessage For="@(() => postViewModel.Content)"/>
                        
                    </div>
                    
                    <div>
                        <label for="Tag">Add one tag</label>
                        <InputText class ="form-control" @bind-Value="postViewModel.TagToBeAdded"/>
                        
                    </div>
                    <button class="btn btn-primary" type="submit" @onclick="Save">Save</button>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                </div>
                        <h3>Tags</h3>

                    @if (postViewModel.Tags is not null)
                    {
                        <ul>

                            @foreach (var tag in postViewModel.Tags)

                            {
                                <li @onclick="() => RemoveTag(tag)" >@tag.content</li>
                         }
                        </ul>
                    }
                
                <label for="Name">Tag name:</label>
                <InputText class="form-control" @bind-Value="currentTag.content"/>
                <button class="btn-secondary" type="submit" @onclick="submitTag">Submit</button>
                
            </EditForm>
        </div>
    </div>



@code {

    [Parameter]
    public int PostId { get; set; }

    private Tag currentTag = new Tag{content = "", Posts = new List<Post>()};
    private Post post = new();


    private PostViewModel postViewModel = new();

    private HubConnection? HubConnection;

    protected override async Task OnInitializedAsync()
    {
        post = await BlogHttpClient.GetFromJsonAsync<Post>($"/Post/{PostId}");
        postViewModel.PostId = post.PostId;
        postViewModel.BlogId = post.BlogId;
        postViewModel.Title = post.Title;
        postViewModel.Content = post.Content;
        postViewModel.OwnerId = post.OwnerId;
        postViewModel.Tags = post.Tags;

        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/postHub"))
            .Build();

        await HubConnection.StartAsync();
    }

    private async Task submitTag()
    {
        if (!string.IsNullOrWhiteSpace(currentTag.content))
        {
            var creatingTagResponse = await BlogHttpClient.PostAsJsonAsync<Tag>("/Tag", currentTag);
            if (creatingTagResponse.IsSuccessStatusCode)
            {
                var createdTag = await creatingTagResponse.Content.ReadFromJsonAsync<Tag>();
                postViewModel.Tags.Add(createdTag);
                var creatingPostTagResponse = await BlogHttpClient.PostAsJsonAsync("/PostTag", new PostTagViewModel
                {
                    Id = 0,
                    PostId = post.PostId,
                    TagId = createdTag.Id
                });
            }
            else
            {
                Console.WriteLine(creatingTagResponse.Content.ReadAsStringAsync().Result);
            }
            currentTag = new Tag{ content = "", Posts = new List<Post>()};
        }

    }
    
    private async Task RemoveTag(Tag tag)
    {
        postViewModel.Tags.Remove(tag);
    }

    private async Task Save()
    {
        //var oneElement = postViewModel.Tags[0];
        //postViewModel.Tags.Add(oneElement);
        var response = await BlogHttpClient.PutAsJsonAsync($"/Post/{PostId}", postViewModel);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/posts/{post.BlogId}");
            var currentPost = await response.Content.ReadFromJsonAsync<Post>();
            if (HubConnection is not null)
            {
                await HubConnection.SendAsync("SendEditPost", currentPost);
            }
        }
        else
        {
            Console.WriteLine(response.Content.ReadAsStringAsync().Result);
        }
    }

}
}